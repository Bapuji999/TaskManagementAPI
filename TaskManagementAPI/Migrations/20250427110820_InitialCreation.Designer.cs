// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManagementAPI.EntityFramework.Models;

#nullable disable

namespace TaskManagementAPI.Migrations
{
    [DbContext(typeof(TaskManagementDBEntites))]
    [Migration("20250427110820_InitialCreation")]
    partial class InitialCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TaskManagementAPI.EntityFramework.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AssignedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.ToTable("Task");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignedUserId = 1,
                            CreatedAt = new DateTime(2025, 4, 27, 11, 8, 19, 860, DateTimeKind.Utc).AddTicks(3127),
                            Description = "Setup project structure",
                            DueDate = new DateTime(2025, 4, 28, 11, 8, 19, 860, DateTimeKind.Utc).AddTicks(3128),
                            Status = "Pending",
                            Title = "Initial Setup"
                        },
                        new
                        {
                            Id = 2,
                            AssignedUserId = 2,
                            CreatedAt = new DateTime(2025, 4, 27, 11, 8, 19, 860, DateTimeKind.Utc).AddTicks(3137),
                            Description = "Create database and apply migrations",
                            DueDate = new DateTime(2025, 4, 28, 11, 8, 19, 860, DateTimeKind.Utc).AddTicks(3138),
                            Status = "Pending",
                            Title = "Database Migration"
                        });
                });

            modelBuilder.Entity("TaskManagementAPI.EntityFramework.Models.TaskComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskComment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Started working on project setup",
                            CreatedAt = new DateTime(2025, 4, 27, 11, 8, 19, 860, DateTimeKind.Utc).AddTicks(3167),
                            TaskId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Database created successfully",
                            CreatedAt = new DateTime(2025, 4, 27, 11, 8, 19, 860, DateTimeKind.Utc).AddTicks(3169),
                            TaskId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("TaskManagementAPI.EntityFramework.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 27, 11, 8, 19, 860, DateTimeKind.Utc).AddTicks(2865),
                            Email = "john.doe@example.com",
                            IsActive = true,
                            Password = "Mabc@123",
                            Role = "Manager",
                            UserName = "john.doe"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 4, 27, 11, 8, 19, 860, DateTimeKind.Utc).AddTicks(2871),
                            Email = "jane.smith@example.com",
                            IsActive = true,
                            Password = "Abc@123",
                            Role = "User",
                            UserName = "jane.smith"
                        });
                });

            modelBuilder.Entity("TaskManagementAPI.EntityFramework.Models.Task", b =>
                {
                    b.HasOne("TaskManagementAPI.EntityFramework.Models.User", "AssignedUser")
                        .WithMany("Tasks")
                        .HasForeignKey("AssignedUserId");

                    b.Navigation("AssignedUser");
                });

            modelBuilder.Entity("TaskManagementAPI.EntityFramework.Models.TaskComment", b =>
                {
                    b.HasOne("TaskManagementAPI.EntityFramework.Models.Task", "Task")
                        .WithMany("TaskComments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManagementAPI.EntityFramework.Models.User", "User")
                        .WithMany("TaskComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManagementAPI.EntityFramework.Models.Task", b =>
                {
                    b.Navigation("TaskComments");
                });

            modelBuilder.Entity("TaskManagementAPI.EntityFramework.Models.User", b =>
                {
                    b.Navigation("TaskComments");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
